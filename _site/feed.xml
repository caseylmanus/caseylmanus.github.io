<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casey&#39;s Technobabble</title>
    <description>Feel free to contact me.  The opinions on this site do not  reflect the opinions of my employer.
</description>
    <link>http://caseylmanus.github.io/</link>
    <atom:link href="http://caseylmanus.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 22 Apr 2015 09:49:10 -0500</pubDate>
    <lastBuildDate>Wed, 22 Apr 2015 09:49:10 -0500</lastBuildDate>
    <generator>Jekyll v2.5.1</generator>
    
      <item>
        <title>ReactJS without JSX - Suprisingly Elegant</title>
        <description>&lt;p&gt;I was working on a small hybrid mobile project yesterday and wanted to use &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; and the Flux architecture pattern to power the user interface.  I didn’t want to use JSX becuase I wanted it to fit into the existing build system without any modifications, so adding the React tools wasn’t an option.  &lt;/p&gt;

&lt;p&gt;Typically, when you use ReactJS without JSX the resulting render code looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;First Element&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OR:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;First Element&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that would create the following html:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;First Element&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For anyone that has looked at the output from the JSX compiler, then the first should be fairly familiar to you,
and the second is taking advantage of the “React.DOM” helpers provided by the framework.&lt;/p&gt;

&lt;p&gt;This is ok, but I find it a little verbose to write without machine assistance (ie, JSX compiling).  So I set out 
to simplifiy it for my own purpose.  What I quickly realized is that the method “React.createElement” takes the following arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;type:  the type of element to create, either a string for an html element, or a ReactJS class.&lt;/li&gt;
  &lt;li&gt;properties:  an object that represents properties of the html element for example “{id: ‘contentDiv’}” &lt;/li&gt;
  &lt;li&gt;an array of children to the element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That meant that any React Element could be represented in a simple JSON data structure.  For the example above, the JSON would look 
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;First Element&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Given that data representation, it was a simple matter to write a method to iterate recursively over the tree of element meta data
and then use it in your render method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;renderTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a complete JSFiddle example:&lt;/p&gt;

&lt;iframe width=&quot;90%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/caseylmanus/reqotbn8/embedded/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I don’t think this concept is unique or even complete at this point, but I hope it does reveal a path
to elegantly working with ReactJS without JSX which others might find useful.  It also gave me really
good insight into how the JSX compiler works, and how ReactJS works.    &lt;/p&gt;

&lt;p&gt;To complete the concept, I would create a ReactJS mixin for the “renderTree” function, and create a 
DSL to make it easy to build and manage the JSON data structure. &lt;/p&gt;

&lt;p&gt;For most use cases, I still feel like JSX is superior.  &lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 05:28:46 -0500</pubDate>
        <link>http://caseylmanus.github.io/reactjs,/javascript,/spa/2015/04/18/ReactJS-Without-JSX.html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/reactjs,/javascript,/spa/2015/04/18/ReactJS-Without-JSX.html</guid>
        
        
        <category>reactjs,</category>
        
        <category>javascript,</category>
        
        <category>spa</category>
        
      </item>
    
      <item>
        <title>Discovering AngularJS - A Journey</title>
        <description>&lt;h2 id=&quot;avoidance&quot;&gt;Avoidance&lt;/h2&gt;
&lt;p&gt;First of all, let me say that for a long time, I’ve &lt;strong&gt;hated, avoided, and shunned&lt;/strong&gt; &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt;.  It was a bit irrational but whenever I am exploring a new technology, I have to get that “AH-HA” moment before I can truely internalize it and consider it viable.  I’ve tried in the past to get there with AngularJS, but I never really did.  I got bogged down by the fact there seems to be so many concepts and words that don’t map to the non-AngularJS world.  Every example I found was trivial and it was hard to figure out how I could map it to the real-world apps I’ve done with BackboneJS.  &lt;/p&gt;

&lt;h2 id=&quot;desire-and-curiosity&quot;&gt;Desire and Curiosity&lt;/h2&gt;
&lt;p&gt;I’ve honestly grown a bit tired of my old &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone.js&lt;/a&gt; stack.  There are some things I love about the framework,  such as the fact it is code based rather than convention, it is light weight, it has rich model support.  The other big seller for me is that there are exactly 4 major concepts to learn:  Models, Collections, Views, and Routers.  &lt;/p&gt;

&lt;p&gt;A big problem for me was always the fact that Views are almost an afterthought with very little lifecycle management.  I also found that &lt;a href=&quot;http://epoxyjs.org&quot;&gt;EpoxyJS&lt;/a&gt; was a good addition to help with 2 way data binding.  So my peferred stack of BackboneJS  + Epoxy + &lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt; was plenty capable, but there was a bit of boilerplate code I kept around to assist with the View lifecycle and garbage collection.  I tried &lt;a href=&quot;http://marionettejs.com&quot;&gt;Marionette.js&lt;/a&gt; on one project to assist with the view lifecycle and the boilerplate code, but I also wanted to consider a completely different alternative mostly due to mental fatique.  &lt;/p&gt;

&lt;h2 id=&quot;a-brief-love-affair&quot;&gt;A Brief Love Affair&lt;/h2&gt;
&lt;p&gt;While looking at alternatives I feel in love with &lt;a href=&quot;http://polymer-project.org&quot;&gt;Polymer&lt;/a&gt; and love the potential glimpse into the future of building apps with web components.  There are some big ideas represented here, and it is worth a look. Polymer leverages some concepts such as the proposed HTML web components, shadow-dom and HTML imports. These aren’t really available in any major browser outside of Chrome, so Polymer provides a set of polyfils to make it possible to leverage those concepts. Between versions there have been significant breaking changes and there are some clear performance challenges, which rules it out for production use at this time.&lt;/p&gt;

&lt;h2 id=&quot;what-i-wanted&quot;&gt;What I wanted&lt;/h2&gt;
&lt;p&gt;For whatever I did in my next project, I wanted to get the same component based feel as Polymer.  I wanted to be able to write custom elements that encapsulate funcionality and behaviors within them, and I wanted my HTML to be expressive of functionality, not just structure.&lt;/p&gt;

&lt;p&gt;For example, if I was building a site similar to Amazon:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-shell&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;left-panel&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-menu&amp;gt;&amp;lt;/site-menu&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/left-panel&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;right-panel&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;main-content&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;featured-productcarousel&amp;gt;&amp;lt;/featured-productcarousel&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;product-categories&amp;gt;&amp;lt;/product-categories&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;recommended-productsbyhistory&amp;gt;&amp;lt;/recommended-productsbyhistory&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main-content&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-footer&amp;gt;&amp;lt;/site-footer&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/right-panel&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/site-shell&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;finally-the-ah-ha-moment&quot;&gt;Finally the AH-HA moment&lt;/h2&gt;
&lt;p&gt;So I started with the AngularJS documentation, and I reviewed mutiple tutorials and videos. I still just didn’t get it.  I finally found a &lt;a href=&quot;http://campus.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;course&lt;/a&gt; at CodeSchool that really got me started.  I highly recommend you to take this course, it should only take a couple of hours.  I also found a great 
&lt;a href=&quot;http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html&quot;&gt;blog post&lt;/a&gt; that discusses eliminating ng-controller from your app, this really clicked for me and got me where I wanted to go.  &lt;/p&gt;

&lt;h2 id=&quot;the-concepts&quot;&gt;The Concepts&lt;/h2&gt;
&lt;p&gt;AngularJS is &lt;strong&gt;BIG&lt;/strong&gt;.  There are a lot of concepts that slap you in the face when you are first looking into it.  The &lt;strong&gt;reality&lt;/strong&gt; though, is that there aren’t that many you really should care about.  You can build an app that is well structured and elegant with just a few of them: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modules&lt;/li&gt;
  &lt;li&gt;Directives&lt;/li&gt;
  &lt;li&gt;Expressions and Filters&lt;/li&gt;
  &lt;li&gt;Services and Factories&lt;/li&gt;
  &lt;li&gt;Routes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Know the rest exist, but don’t concern yourself too much with the other things in my opinion. &lt;/p&gt;

&lt;h1 id=&quot;modules&quot;&gt;Modules&lt;/h1&gt;
&lt;p&gt;An application module is a “namespace” for your code.  Using multiple modules allows you to organize your code into functional areas either by objects of the same type, i.e. “technical slice” or by objects that provides related user facing functionality, i.e “functional slice”.  My preference is to organize your app code by functional slice, but it is not common to have some items that are cross function or utility in nature, so doing those in a technical slice organization isn’t a bad option.&lt;/p&gt;

&lt;h1 id=&quot;directives&quot;&gt;Directives&lt;/h1&gt;
&lt;p&gt;Directives are what allows those cool custom HTML elements I discussed earlier.  A directive is the primary building block that everything else enables and services.  Directives can be for custom elements or custom attributes in other HTML elements.  You can even use a custom attribute on a custom element to compose things together.  You will probably want to use a concrete Controller with your Directives, rather than inlining the controller to make testing possible.&lt;/p&gt;

&lt;h1 id=&quot;expressions-and-filters&quot;&gt;Expressions and Filters&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Expressions:&lt;/strong&gt; are the JavaScript like code snippets that can be embedded into your HTML templates to that will be evalulated by the runtime and replaced with text in the output. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filters:&lt;/strong&gt; are modifiers to expression output, which can format the outputed data or run other operations such as sorting.  To really understand these, just remember that the output value of the expression is passed or (piped) through the filter before it is outputed.  &lt;/p&gt;

&lt;h1 id=&quot;services-and-factories&quot;&gt;Services and Factories&lt;/h1&gt;
&lt;p&gt;Services and Factories are the “Model” of your application, or more accurately how you interact with your model.  At first, I was a bit 
concerned that this was anemic, and not quite workable.  My philosophy shifted a little and I realized that the Angular way was a bit freeing
over the Backbone.js way.  You can allow your model to live on the server, or you can build a richer model in about anything you want (including Backbone.js) and wrap it with a service or a factory so the rest of you Angular app can interact with it without much problem.  &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;What’s the difference between a service and factory?&lt;/p&gt;

&lt;p&gt;One thing to remember about AngularJS is that it provides &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; to assist with unit testing.  Therefore, all Factories and Services are singleton objects.  With that knowledge it is easy to understand the difference. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Service:&lt;/strong&gt; This is a function provided to your consumer.  Think of these as global functions in a way, but injected into your code so they can be mocked.  &lt;br /&gt;
 &lt;strong&gt;Factory:&lt;/strong&gt; This is an object provided to your consumer, it will be instantiated (by using the new keyword) by the framework prior to injecting it into your code.  This is similar to the factory pattern in any other environment. &lt;/p&gt;

&lt;h1 id=&quot;routes&quot;&gt;Routes&lt;/h1&gt;
&lt;p&gt;Routes are simply bookmarkable URLS using either hashes or HTML5 Push State that trigger the code to change views.  This should be a familiar concept to anybody who was worked with Backbone.js or any other modern client MVC framework.&lt;/p&gt;

&lt;h2 id=&quot;angularjs-20-and-the-future&quot;&gt;AngularJS 2.0 and the future&lt;/h2&gt;
&lt;p&gt;There has been a lot said regarding the fact that AngularJS 2.0 will not be compatible with 1.x code.  AngularJS seems to be more toward the component model that I prefer and desire, so to me if the cost of that is breaking backwards compatibility then fine.  I also think that if you build your code with the component mindset, i.e. eliminate the use of ng-controller in your markup, you might be able to move your app pretty easily to v2.0. &lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;AngularJS is a great framework that I didn’t give enough credit to.  It can be used to create web components similiar in feel to Polymer and it provides great way to build composable, reusable components that extend the built in capabilities of HTML with your application logic. &lt;/p&gt;

</description>
        <pubDate>Fri, 12 Dec 2014 04:28:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/2014/12/12/Angular-Notes.html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/2014/12/12/Angular-Notes.html</guid>
        
        
      </item>
    
      <item>
        <title>8 Queens Puzzle in Go (GoLang)</title>
        <description>&lt;p&gt;I am currently in the process of evaluating &lt;a href=&quot;http://golang.org&quot;&gt;GO&lt;/a&gt;.  One of the excersizes I always do when looking at a new language is to implement the 8 queens puzzle, which is an old computational exercise to determine how many different combinations of 8 queens can be placed on a Chess board (which is 8 x 8 squares) in positions which they cannot attach each other.  &lt;/p&gt;

&lt;p&gt;In computer science this problem is most often implemented as nQueens, meaning n Queens on an n x n board.  To read more about the problem see &lt;a href=&quot;http://en.wikipedia.org/wiki/Eight_queens_puzzle&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Implementing this in GO was extremely easy, and fast to implement. You can run an example on the &lt;a href=&quot;http://play.golang.org/p/9fJhbkQj8c&quot;&gt;Go Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code on GitHub: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/caseylmanus/df10ad3457b916c32373.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 18 Nov 2014 03:19:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/golang/eightqueenspuzzle/2014/11/18/Eight-Queens-in-Go-(GoLang).html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/golang/eightqueenspuzzle/2014/11/18/Eight-Queens-in-Go-(GoLang).html</guid>
        
        
        <category>golang</category>
        
        <category>eightqueenspuzzle</category>
        
      </item>
    
      <item>
        <title>Say Hello!</title>
        <description>&lt;p&gt;This is the first post to my new blog.  I am going to talk about some of the things I am passionate about in technology, coding, etc.  I will also create pages for my ever growing list of open source projects and code snippets on Github that I am working on.&lt;/p&gt;

&lt;p&gt;Here you will find topics on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML5, Angular, React.js, Backbone, and Polymer.&lt;/li&gt;
  &lt;li&gt;Mobile Development&lt;/li&gt;
  &lt;li&gt;PhoneGap&lt;/li&gt;
  &lt;li&gt;Scrum and Agile&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;The Go Language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am also very &lt;strong&gt;interested&lt;/strong&gt; in machine learning and data science so there will stuff about that, and whatever else strikes my fancy.  &lt;/p&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 04:28:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/2014/11/14/Hello.html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/2014/11/14/Hello.html</guid>
        
        
      </item>
    
  </channel>
</rss>
