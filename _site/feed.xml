<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casey&#39;s Technobabble</title>
    <description>Feel free to contact me.  The opinions on this site do not  reflect the opinions of my employer.
</description>
    <link>http://caseylmanus.github.io/</link>
    <atom:link href="http://caseylmanus.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Dec 2014 15:26:48 -0600</pubDate>
    <lastBuildDate>Fri, 12 Dec 2014 15:26:48 -0600</lastBuildDate>
    <generator>Jekyll v2.5.1</generator>
    
      <item>
        <title>Discovering AngularJS - A Journey</title>
        <description>&lt;h2 id=&quot;avoidance&quot;&gt;Avoidance&lt;/h2&gt;
&lt;p&gt;First of all, let me say that for a long time, I’ve &lt;strong&gt;hated, avoided, and shunned&lt;/strong&gt; &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt;.  It was a bit irrational but whenever I am exploring a new technology, I have to get that “AH-HA” moment before I can truely internalize it and consider it viable.  I’ve tried in the past to get there with AngularJS, but I never really did.  I got bogged down by the fact there seems to be so many concepts and words that don’t make sense in the non-AngularJS world and every example I’ve looked at was trivial and there was no indication of how in the world I could map it to the real-world apps I’ve done with BackboneJS.  &lt;/p&gt;

&lt;h2 id=&quot;desire-and-curiosity&quot;&gt;Desire and Curiosity&lt;/h2&gt;
&lt;p&gt;I’ve honestly grown a bit tired of my old &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone.js&lt;/a&gt; stack.  There are some things I love about the framework,  such as the fact it is code based rather than convention, it is light weight, it has rich model support.  The other big seller for me is that there are exactly 4 major concepts to learn:  Models, Collections, Views, and Routers.  That’s it.  &lt;/p&gt;

&lt;p&gt;A big problem for me was always the fact that Views are almost an afterthought.  There isn’t much to help manage the view lifecycle.  I also found that EpoxyJS was a good alternative addition to help with 2 way data binding.  So my peferred stack of BackboneJS  + &lt;a href=&quot;http://epoxyjs.org&quot;&gt;Epoxy.js&lt;/a&gt; + &lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt; was plenty capable, but there was a bit of boilerplate code I kept to assist with the View lifecycle and garbage collection.  I was considering adding &lt;a href=&quot;http://marionettejs.com&quot;&gt;Marionette.js&lt;/a&gt; to the stack to assist with the view lifecycle and the boilerplate code, but I also wanted to consider a completely different alternative mostly due to mental fatique.  &lt;/p&gt;

&lt;h2 id=&quot;a-brief-love-affair&quot;&gt;A Brief Love Affair&lt;/h2&gt;
&lt;p&gt;While looking at alternatives I feel in love with &lt;a href=&quot;http://polymer-project.org&quot;&gt;Polymer&lt;/a&gt; and love the potential glimpse into the future of building apps with web components.  There are some big ideas represented here, and it is worth a look.  I will say that between versions their have been significant breaking changes, making it clear that it isn’t production worthy, and there are some clear performance issues that are yet to be solved.  Polymer leverages some concepts such as the proposed HTML web components, shadow-dom and HTML imports.  Since these aren’t really available in any major browser, so Polymer provides a set of polyfils to make it possible to leverage those concepts.  &lt;/p&gt;

&lt;h2 id=&quot;what-i-wanted&quot;&gt;What I wanted&lt;/h2&gt;
&lt;p&gt;For whatever I did in my next project, I wanted to get the same component based approach, so that heavily influenced my choice.  I wanted to be able to write custom elements and encapsulate funcionality and behaviors within them, and I wanted my HTML to be expressive of functionality, not just structure.&lt;/p&gt;

&lt;p&gt;For example, if I was building a site similar to Amazon:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-shell&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;left-panel&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-menu&amp;gt;&amp;lt;/site-menu&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/left-panel&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;right-panel&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;main-content&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;featured-productcarousel&amp;gt;&amp;lt;/featured-productcarousel&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;product-categories&amp;gt;&amp;lt;/product-categories&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;recommended-productsbyhistory&amp;gt;&amp;lt;/recommended-productsbyhistory&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main-content&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;site-footer&amp;gt;&amp;lt;/site-footer&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/right-panel&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/site-shell&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;diving-in-head-first&quot;&gt;Diving In Head First&lt;/h2&gt;
&lt;p&gt;So I started with the AngularJS documentation, and I reviewed mutiple tutorials and videos. I still just didn’t get it.  I finally found a &lt;a href=&quot;http://campus.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;course&lt;/a&gt; at CodeSchool that really got me started.  I highly recommend you to through this tutorial.  I also found a great 
&lt;a href=&quot;http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html&quot;&gt;blog post&lt;/a&gt; that discusses how eliminating ng-controller from your app, this really clicked for me and got me where I wanted to go.  &lt;/p&gt;

&lt;h2 id=&quot;angularjs-ah-ha-moment&quot;&gt;AngularJS AH-HA Moment&lt;/h2&gt;
&lt;p&gt;AngularJS is &lt;strong&gt;BIG&lt;/strong&gt;.  There are a lot of concepts that slap you in the face when you are first looking into it.  The &lt;strong&gt;reality&lt;/strong&gt; though, is that there aren’t that many you really should care about.  You can build an app that is well structured and elegant with just a few of them: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modules&lt;/li&gt;
  &lt;li&gt;Directives&lt;/li&gt;
  &lt;li&gt;Expressions and Filters&lt;/li&gt;
  &lt;li&gt;Services and Factories&lt;/li&gt;
  &lt;li&gt;Routes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Know the rest exist, and visit it when it make sense, but don’t concern yourself too much with the other things. &lt;/p&gt;

&lt;h2 id=&quot;the-concepts&quot;&gt;The Concepts&lt;/h2&gt;
&lt;p&gt;Here I will go throught he core concepts that make AngularJS awesome an ideal framework for reaching my goals.  &lt;/p&gt;

&lt;h1 id=&quot;modules&quot;&gt;Modules&lt;/h1&gt;

&lt;h1 id=&quot;directives&quot;&gt;Directives&lt;/h1&gt;

&lt;h1 id=&quot;expressions-and-filters&quot;&gt;Expressions and Filters&lt;/h1&gt;

&lt;h1 id=&quot;services-and-factories&quot;&gt;Services and Factories&lt;/h1&gt;

&lt;h1 id=&quot;routes&quot;&gt;Routes&lt;/h1&gt;

</description>
        <pubDate>Fri, 12 Dec 2014 04:28:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/2014/12/12/Angular-Notes.html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/2014/12/12/Angular-Notes.html</guid>
        
        
      </item>
    
      <item>
        <title>8 Queens Puzzle in Go (GoLang)</title>
        <description>&lt;p&gt;I am currently in the process of evaluating &lt;a href=&quot;http://golang.org&quot;&gt;GO&lt;/a&gt;.  One of the excersizes I always do when looking at a new language is to implement the 8 queens puzzle, which is an old computational exercise to determine how many different combinations of 8 queens can be placed on a Chess board (which is 8 x 8 squares) in positions which they cannot attach each other.  &lt;/p&gt;

&lt;p&gt;In computer science this problem is most often implemented as nQueens, meaning n Queens on an n x n board.  To read more about the problem see &lt;a href=&quot;http://en.wikipedia.org/wiki/Eight_queens_puzzle&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Implementing this in GO was extremely easy, and fast.  I didn’t do any performance calculations, but compared to previous interations I’ve done in C++, C#, Java, and others this version seems to perform the best.  You can run an example on the &lt;a href=&quot;http://play.golang.org/p/9fJhbkQj8c&quot;&gt;Go Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code on GitHub: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/caseylmanus/df10ad3457b916c32373.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 18 Nov 2014 03:19:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/golang/eightqueenspuzzle/2014/11/18/Eight-Queens-in-Go-(GoLang).html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/golang/eightqueenspuzzle/2014/11/18/Eight-Queens-in-Go-(GoLang).html</guid>
        
        
        <category>golang</category>
        
        <category>eightqueenspuzzle</category>
        
      </item>
    
      <item>
        <title>Say Hello!</title>
        <description>&lt;p&gt;This is the first post to my new blog.  I am going to talk about some of the things I am passionate about in technology, coding, etc.  I will also create pages for my ever growing list of open source projects and code snippets on Github that I am working on.&lt;/p&gt;

&lt;p&gt;Here you will find topics on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML5, Angular, React.js, Backbone, and Polymer.&lt;/li&gt;
  &lt;li&gt;Mobile Development&lt;/li&gt;
  &lt;li&gt;PhoneGap&lt;/li&gt;
  &lt;li&gt;Scrum and Agile&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;The Go Language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am also very &lt;strong&gt;interested&lt;/strong&gt; in machine learning and data science so there will stuff about that, and whatever else strikes my fancy.  &lt;/p&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 04:28:46 -0600</pubDate>
        <link>http://caseylmanus.github.io/2014/11/14/Hello.html</link>
        <guid isPermaLink="true">http://caseylmanus.github.io/2014/11/14/Hello.html</guid>
        
        
      </item>
    
  </channel>
</rss>
